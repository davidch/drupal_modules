<?php

/**
 * @file
 * filedepot.module
 * Filedepot: File Management Module developed by Nextide www.nextide.ca
 * Full featured document managment module with a desktop application feel.
 * Integrated Organic Group, Role and User permissions to secure folders, automated notifications,
 * Tag Cloud integrated search, version managment, user flagged favorite files and more.
 */

global $filedepot, $nexcloud;
global $_numfolders2create, $_numfiles2create, $_maxrecordsperfolder, $_validfolders;

// Permissions used when category directories are auto created and files uploaded
define('FILEDEPOT_CHMOD_FILES', 0666);
define('FILEDEPOT_CHMOD_DIRS',    0777);

define('FILEDEPOT_UNAPPROVED_STATUS', 0);
define('FILEDEPOT_APPROVED_STATUS', 1);
define('FILEDEPOT_LOCKED_STATUS', 2);
define('FILEDEPOT_INCOMING_STATUS', 9);

define('FILEDEPOT_NOTIFY_NEWFILE', 1);
define('FILEDEPOT_NOTIFY_APPROVED', 2);
define('FILEDEPOT_NOTIFY_REJECT', 3);
define('FILEDEPOT_NOTIFY_ADMIN', 4);
define('FILEDEPOT_BROADCAST_MESSAGE', 5);

define('FILEDEPOT_FILTER_EXCLUDEMODE', 0);
define('FILEDEPOT_FILTER_INCLUDEMODE', 1);

define('FILEDEPOT_CLIENT_SUPPORT', FALSE);  // No Client Support presenly in D7 version

if (!defined('LB')) {
  define('LB', "\n");
}

function filedepot_filedepot() {
  static $filedepot;
  if (!isset($filedepot)) {
    module_load_include('php', 'filedepot', 'filedepot.class');
    $filedepot = filedepot::getInstance();
  }
  return $filedepot;
}

function filedepot_nexcloud() {
  static $nexcloud;
  if (!isset($nexcloud)) {
    module_load_include('php', 'filedepot', 'nexcloud.class');
    $nexcloud = new filedepotTagCloud();
  }
  return $nexcloud;
}

/**
 * Implementation of hook_help().
 */
function filedepot_help($path, $args) {
  switch ($path) {
    case 'admin/help#filedepot':
      return t('Filedepot Default Settings');
      break;
  }
}


/**
 * Implementation of hook_perm().
 */
function filedepot_permission() {
  return array(
    'access filedepot' => array(
      'title' => t('Access Fildepot'),
      'description' => t('Access the filedepot main screen but possibly not any folders which have individual permissions setup from within the module. To set a folder permission inside the module requires you to be the folder admin and then select the folder. Hover over the folder name in the main display area and you will see the name change to a edit field like effect. Click on the folder name now, and you will get the edit folder dialog where there is a folder permissions button.'),
    ),
    'administer filedepot' => array(
      'title' => t('Administer Fildepot'),
      'description' => t('Provides the user with overall admin rights including folder admin rights to all folders.'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function filedepot_menu() {
  $items = array();

  $items['filedepot'] = array(
    'title' => 'Filedepot',
    'page callback' => 'filedepot_main',
    'page arguments' => array(1),   // optional group context
    'access callback' => 'user_access',
    'access arguments' => array('access filedepot'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['filedepot/%ctools_js/newfile'] = array(
    'title' => 'Add new file',
    'page callback' => 'filedepot_newfile_dialog',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access filedepot'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['filedepot/%ctools_js/newfolder'] = array(
    'title' => 'Add new file',
    'page callback' => 'filedepot_newfolder_dialog',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access filedepot'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Menu hooks for ctools modal to work if OG is passed in as the 2nd parm
  $items['filedepot/%/%ctools_js/newfile'] = array(
    'title' => 'Add new file',
    'page callback' => 'filedepot_newfile_dialog',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access filedepot'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['filedepot/%/%ctools_js/newfolder'] = array(
    'title' => 'Add new file',
    'page callback' => 'filedepot_newfolder_dialog',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access filedepot'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Menu hooks for ctools modal to work if OG is passed in as the 2nd parm
  $items['filedepot/folder/%/%ctools_js/newfile'] = array(
    'title' => 'Add new file',
    'page callback' => 'filedepot_newfile_dialog',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('access filedepot'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['filedepot/folder/%/%ctools_js/newfolder'] = array(
    'title' => 'Add new file',
    'page callback' => 'filedepot_newfolder_dialog',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('access filedepot'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['filedepot/folder/%'] = array(
    'title' => 'Filedepot',
    'page callback' => 'filedepot_main',
    'page arguments' => array(1,2),
    'access callback' => 'user_access',
    'access arguments' => array('access filedepot'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/settings/filedepot'] = array(
    'title' => 'Filedepot Settings',
    'description' => 'Administrate Filedepot Configuration Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filedepot_admin_settings'),
    'access arguments' => array('administer filedepot'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'filedepot.admin.inc',
  );

  $items['filedepot_ajax'] = array(
    'title' => 'Filedepot',
    'page callback' => 'filedepot_dispatcher',
    'page arguments' => array(1), // Passing in wildcard which should be parm 1
    'access callback' => 'filedepot_user_access',
    'access arguments' => array('access filedepot'),
    'type' => MENU_CALLBACK,
    'file' => 'ajaxserver.php',
  );

  $items['filedepot_download/%node/%'] = array(
    'title' => 'File download',
    'page callback' => 'filedepot_download',
    'page arguments' => array(1, 2, 3, 4),
    'access callback' => 'filedepot_user_access',
    'access arguments' => array('access filedepot'),
    'type' => MENU_CALLBACK,
  );


  return $items;

}


/**
 * Implementation of hook_theme().
 */
function filedepot_theme() {
  module_load_include('php', 'filedepot', 'lib-theme');
  $theme_hooks =  array(
    'filedepot_main_page' => array(
      'template' => 'theme/filedepot-mainpage',
      'variables' => array(
        'cid' => NULL,
        'layout_url' => base_path() . drupal_get_path('module', 'filedepot'),
      ),
    ),
    'filedepot_header' => array(
      'template' => 'theme/filelistingheader',
      'variables' => array(),
    ),
    'filedepot_activefolder' => array(
      'template' => 'theme/activefolder',
      'variables' => array('layout_url' => base_path() . drupal_get_path('module', 'filedepot')),
    ),
    'filedepot_activefolder_admin' => array(
      'template' => 'theme/activefolder_admin',
      'variables' => array(),
    ),
    'filedepot_activefolder_nonadmin' => array(
      'template' => 'theme/activefolder_nonadmin',
      'variables' => array(),
    ),
    'filedepot_toolbar_form' => array(
      'template' => 'theme/toolbar_form',
      'variables' => array(),
    ),
    'filedepot_ajaxstatus' => array(
      'template' => 'theme/ajaxstatus',
      'variables' => array(),
    ),
    'filedepot_ajaxactivity' => array(
      'template' => 'theme/ajaxactivity',
      'variables' => array('layout_url' => base_path() . drupal_get_path('module', 'filedepot')),
    ),
    'filedepot_filelisting' => array(
      'template' => 'theme/filelisting_record',
      'variables' => array(
        'listingrec' => NULL,
        'foldernumber' => 1,
        'level' => 1,
        'morerecords' => '',
        'layout_url' => base_path() . drupal_get_path('module', 'filedepot'),
      ),
    ),
    'filedepot_folderlisting' => array(
      'template' => 'theme/filelisting_subfolder',
      'variables' => array(
        'folderrec' => NULL,
        'folderprefix' => 1,
        'level' => 1,
        'subfoldercontent' => NULL,
        'maxorder' => 0,
        'layout_url' => base_path() . drupal_get_path('module', 'filedepot'),
      ),
    ),
    'filedepot_filelisting_emptyfolder' => array(
      'template' => 'theme/filelisting_emptyfolder',
      'variables' => array(),
    ),
    'filedepot_filelisting_moredata' => array(
      'template' => 'theme/filelisting_loading_moredata',
      'variables' => array(
        'cid' => NULL,
        'fid' => NULL,
        'foldernumber' => NULL,
        'level' => NULL,
      ),
    ),
    'filedepot_filelisting_loadfolder' => array(
      'template' => 'theme/filelisting_load_folder',
      'variables' => array(
        'cid' => NULL,
        'fid' => NULL,
        'foldernumber' => NULL,
        'level' => NULL,
      ),
    ),
    'filedepot_folder_moveoptions' => array(
      'template' => 'theme/folder_onhover_move',
      'variables' => array(
        'folderid' => 0,
        'order' => 0,
        'maxorder' => 0,
        'layout_url' => base_path() . drupal_get_path('module', 'filedepot'),
      ),
    ),
    'filedepot_newfiledialog_folderoptions' => array(
      'template' => 'theme/newfile_folderoptions',
      'variables' => array('cid' => NULL),
    ),
    'filedepot_newfolderdialog' => array(
      'template' => 'theme/newfolder_form',
      'variables' => array('cid' => NULL),
    ),
    'filedepot_movefiles_form' => array(
      'template' => 'theme/move_batch_form',
      'variables' => array(),
    ),
    'filedepot_moveincoming_form' => array(
      'template' => 'theme/move_incoming_form',
      'variables' => array(),
    ),
    'filedepot_folder_breadcrumb' => array(
      'template' => 'theme/folder_breadcrumb_link',
      'variables' => array(
        'cid' => 0,
        'padding' => 0,
      ),
    ),
    'filedepot_filedetail' => array(
      'template' => 'theme/filedetail',
      'variables' => array(
        'fid' => NULL,
        'reportmode' => NULL,
        'layout_url' => base_path() . drupal_get_path('module', 'filedepot'),
      ),
    ),
    'filedepot_fileversion' => array(
      'template' => 'theme/filedetail_version',
      'variables' => array(
        'versionRec' => NULL,
        'layout_url' => base_path() . drupal_get_path('module', 'filedepot'),
      ),
    ),
    'filedepot_folderperms' => array(
      'template' => 'theme/folderperms',
      'variables' => array(
        'cid' => NULL,
      ),
    ),
    'filedepot_folderperms_ogenabled' => array(
      'template' => 'theme/folderperms_ogenabled',
      'variables' => array(
        'cid' => NULL,
      ),
    ),
    'filedepot_folderperm_rec' => array(
      'template' => 'theme/folderperm_record',
      'variables' => array(
        'permRec' => NULL,
        'mode' => NULL,
      ),
    ),
    'filedepot_notifications' => array(
      'template' => 'theme/notifications_report',
      'variables' => array(),
    ),
    'filedepot_notifications_file' => array(
      'template' => 'theme/notifications_file_record',
      'variables' => array(
        'rec' => NULL,
      ),
    ),
    'filedepot_notifications_folder' => array(
      'template' => 'theme/notifications_folder_record',
      'variables' => array(
        'rec' => NULL,
      ),
    ),
    'filedepot_notifications_history' => array(
      'template' => 'theme/notifications_history_record',
      'variables' => array(
        'rec' => NULL,
      ),
    ),
    'filedepot_files' => array(
      'variables' => array('node'),
    ),
    'filedepot_tagcloud' => array(
      'template' => 'theme/tagcloud',
      'variables' => array(),
    ),
    'filedepot_tagcloud_record' => array(
      'template' => 'theme/tagcloud_record',
      'variables' => array(
        'rec' => NULL,
        'maxm' => 0,
      ),
    ),
    'filedepot_taglinkon' => array(
      'template' => 'theme/taglink_record',
      'variables' => array(
        'searchtag' => '',
        'label' => '',
      ),
    ),
    'filedepot_taglinkoff' => array(
      'template' => 'theme/tagdesc_record',
      'variables' => array(
        'label' => '',
      ),
    ),
    'filedepot_searchtag' => array(
      'template' => 'theme/tagsearchlink',
      'variables' => array(
        'searchtag' => '',
        'label' => '',
      ),
    ),
    'filedepot_native_filerecord' => array(
      'template' => 'theme/native_filelisting_record',
      'variables' => array(
        'icon' => '',
        'filelink' => '',
      ),
    ),
    'filedepot_native_filelisting_header' => array(
      'template' => 'theme/native_filelisting_header',
      'variables' => array(),
    ),
  );

  return $theme_hooks;

}



/**
 * Perform user access validation for passed permission.
 */
function filedepot_user_access($perm) {
  global $user, $base_path;

  // Odd Mozilla/Firefox bug with the YUI Uploader (FLASH based) where $_COOKIES is not included in the POST VARS
  // This causes the AJAX savefile request to fail or attempt to be processed as an anonymous user which is not what we want.
  if (isset($_POST['cookie_session']) AND !empty($_POST['cookie_session'])) {

    /* Code added to handle the issue with the default $_COOKIE array being sent by the Flash Image uploader
     * We can send the cookies in the post form data and then extract and rebuild the user object
     */

    // Check if the session is still active, we have a record of the client's session in the database.
    $user = db_query("SELECT u.*, s.* FROM {users} u INNER JOIN {sessions} s ON u.uid = s.uid WHERE s.sid = :sid",
    array(':sid' => $_POST['cookie_session']))->fetchObject();

    // We found the client's session record and they are an authenticated user
    if ($user && $user->uid > 0) {
      // This is done to unserialize the data member of $user and restore their session
      $user = user_load($user->uid);
    }
  }
  elseif ($perm == 'filedepot desktop client' AND isset($_POST['username']) AND isset($_POST['password'])) {
    if (db_query("SELECT count(*) FROM {users} WHERE name=:name AND pass=:pass",
    array(
      ':name' => $_POST['username'],
      ':pass' => $_POST['password'],
    ))->fetchField() == 1) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }

  return user_access($perm);

}


function filedepot_access($op, $node) {
  $filedepot = filedepot_filedepot();
  module_load_include('php', 'filedepot', 'lib-common');

  $ret = FALSE;
  if (!isset($node->nid)) {
    return $ret;
  }
  $res = db_query("SELECT cid FROM {filedepot_categories} WHERE nid=:nid",
  array(
    ':nid' => $node->nid,
  ));
  if (!$res) {
    return $ret;
  }
  $cid = $res->fetchField();
  if ($cid > 0 ) {
    switch ($op) {
      case 'view':
        $ret = $filedepot->checkPermission($cid, 'view');
        break;
      case 'update':
        $ret = $filedepot->checkPermission($cid, 'admin');
        break;
      case 'delete':
        $ret = $filedepot->checkPermission($cid, 'admin');
        break;
      case 'create':
        $parent = filedepot_getTopLevelParent($cid);
        if ($parent == 0) {
          $ret = user_access('administer filedepot');
        }
        else {
          $ret = $filedepot->checkPermission($parent, 'admin');
        }
    }
  }
  return $ret;

}

/**
 * Implementation of hook_main().
 *
 * If user passes in a valid group id or group name as the argument 1 then
 * the group context will be set. After that you will only see folders
 * that are sub-folders of the Group Root level folder
 *
 * If you don't pass in any arguments, no group or folder id, then
 * the group context will be reset and all folders available to
 * user will be displayed
 *
 *
 */
function filedepot_main() {
  $cid = 0;
  $filedepot = filedepot_filedepot();
  $grpid = 0;
  $arg1 = arg(1);
  $arg2 = arg(2);

  if ($arg1 === 'folder' AND $arg2 > 0) {
    $cid = intval($arg2);
  } elseif ($filedepot->ogenabled AND !empty($arg1)) {
    $grpcontext = $arg1;
    if (intval($grpcontext) > 0) {
      // Verify this is a valid group id
      $query = new EntityFieldQuery();
      $entity = $query
      ->entityCondition('entity_type', 'group', '=')
      ->entityCondition('bundle', 'group')
      ->entityCondition('entity_id', $grpcontext)
      ->execute();
      if (isset($entity['group']) AND key($entity['group']) == $grpcontext) {
        $grpid = $grpcontext;
      }
    }
    else {
      // Get the gid from the group name
      $grpcontext = strtolower($grpcontext);
      $query = new EntityFieldQuery();
      $entity = $query
      ->entityCondition('entity_type', 'group', '=')
      ->entityCondition('bundle', 'group')
      ->execute();
      foreach($entity['group'] as $key => $obj) {
        $x = og_get_group('group',$obj->gid);
        if(strtolower($x->label) == $grpcontext) {
          $grpid = $x->gid;
          break;
        }
      }
    }

    if ($grpid > 0) {
      ctools_include('object-cache');
      $cache = ctools_object_cache_set('filedepot', 'grpid', $grpid);
    }

  } else {
    $grpid = 0;
    ctools_include('object-cache');
    $cache = ctools_object_cache_set('filedepot', 'grpid', $grpid);
  }

  $yui_base_url = variable_get('filedepot_yui_baseurl', 'http://yui.yahooapis.com/2.7.0/build/');
  $modulepath = drupal_get_path('module', 'filedepot');
  drupal_add_css($modulepath . '/css/filedepot.css');
  $yuiloader = array(
    '#type' => 'markup',
    '#markup' => '<script type="text/javascript" src="' . $yui_base_url . 'yuiloader/yuiloader.js"></script>',
  );
  drupal_add_html_head($yuiloader, 'yuiloader_script');
  drupal_add_js($modulepath . '/js/filedepotlanguage.js');
  drupal_add_js($modulepath . '/js/nexpro.js');
  drupal_add_js($modulepath . '/js/initapplication.js');
  drupal_add_js($modulepath . '/js/common.js');
  drupal_add_js(libraries_get_path('jquery.blockui.js'));
  drupal_add_js(libraries_get_path('html_encoder.js'));

  drupal_set_breadcrumb();

  // Check that private file stream is setup
  $streams = file_get_stream_wrappers();
  if (!array_key_exists('private',$streams)) {
    drupal_set_message('Warning: Your private file system path is not setup and is required - admin/config/media/file-system');
    watchdog('Warning','Your private file system path is not setup and is required for the filedepot module');
  }

  return theme('filedepot_main_page', array('cid' => $cid));

}

/**
 * Implementation of hook_node_info().
 */
function filedepot_node_info() {
  return array(
    'filedepot_folder' => array(
      'name' => t('Filedepot Folder'),
      'base' => 'filedepot',
      'description' => t('Folder for storing documents'),
      'has_title' => TRUE,
      'title_label' => t('Folder Name'),
      'locked' => FALSE,
    ),
  );
}


function filedepot_form($node, $form_state) {
  $type = node_type_get_type($node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#default_value' => !empty($node->title) ? $node->title : '',
    '#required' => TRUE,
    '#weight' => -5,
  );

  return $form;
}


/**
 * Implementation of hook_form_alter().
 */
function filedepot_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_id == 'filedepot_folder_node_form') {


    module_load_include('php', 'filedepot', 'lib-common');

    if (isset($form['nid']['#value']) AND $form['nid']['#value'] > 0) {
      $node = node_load($form['nid']['#value']);
      $nodetype = node_type_get_types('type', $node);
    }
    else {
      $node = FALSE;
    }

    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Folder Name'),
      '#required' => TRUE,
      '#default_value' => ($node) ? filter_xss($node->title) : '',
      '#weight' => -5,
      '#maxlength' => 255,
    );

    if (user_access('administer filedepot', $user)) {
      $parentFolders = array(0 => 'Top Level Folder');
    }
    else {
      $parentFolders = array();
    }
    $parentFolders += filedepot_recursiveAccessArray(array('admin'));

    $form['parentfolder'] = array(
      '#type' => 'select',
      '#title' => t('Parent Folder'),
      '#required' => TRUE,
      '#options' => $parentFolders,
    );

    if (isset($node->folderdesc) AND !empty($node->folderdesc)) {
      $form['body_filter']['folderdesc']['#default_value'] = filter_xss($node->folderdesc);
    }

    if (isset($node->parentfolder)) {
      $form['parentfolder']['#default_value'] = $node->parentfolder;
    }

    // Remove any files (attachments) that are in the submission queue
    if ($node AND is_array($node->filedepot_folder_file) AND count($node->filedepot_folder_file) > 0) {
      foreach ($node->filedepot_folder_file[LANGUAGE_NONE] as $id => $file) {
        if (db_query("SELECT count(*) FROM {filedepot_filesubmissions} WHERE drupal_fid=:fid", array(':fid' => $file['fid']))->fetchField() == 1) {
          unset($node->filedepot_folder_file[$id]);
        }
      }
    }

    $form['actions']['submit']['#submit'][] = 'filedepot_native_submit';

    unset($form['revision_information']);
    unset($form['comment_settings']);
    unset($form['attachments']);
    unset($form['menu']);
    unset($form['author']);
    unset($form['options']);
  }
}



/* Submit handler for the native drupal edit node form when editing a filedepot node using the native drupal UI
 * Need to move the file to the private filedepot directory
 */
function filedepot_native_submit($form, &$form_state) {
  global $user;

  // Retrieve the upload location - private folder
  $node = node_load($form_state['values']['nid']);
  $filedepot = filedepot_filedepot();
  module_load_include('php', 'filedepot', 'lib-common');
  $private_destination = 'private://filedepot/' . $node->folder . '/';

  // Best to call file_prepare_directory() - even if you believe directory exists
  file_prepare_directory($private_destination, FILE_CREATE_DIRECTORY);

  if (isset($form_state['values']['filedepot_folder_file'][LANGUAGE_NONE])) {
    /* Interate through all the files attached to the folder but only interested
     * in the files that have not yet been moved to the private file system area
     */
    foreach ($form_state['values']['filedepot_folder_file'][LANGUAGE_NONE] as $id => $filefield) {
      if (isset($filefield['fid']) AND $filefield['fid'] > 0) {
        $file = file_load($filefield['fid']);

        list($scheme, $target) = explode('://', $file->uri, 2);
        // If the file is still public then we need to move it
        if ($scheme == 'temporary') {
          // Remove erroneous leading or trailing, forward-slashes and backslashes.
          $target = trim($target, '\/');
          $private_uri = $private_destination . $file->filename;
          file_prepare_directory($private_destination, FILE_CREATE_DIRECTORY);
          $ret = file_move($file, $private_uri, FILE_EXISTS_RENAME);
          drupal_set_message("moving file to: {$private_uri} - {$ret->uri}");

          $unapprovedfile = FALSE;
          $filedepot_fid = db_query("SELECT fid FROM {filedepot_files} WHERE drupal_fid=:fid",    array(':fid' => $file->fid))->fetchField();
          if ($filedepot_fid === FALSE) { // If not, check if there is a record in the submissions table that has just not been approved
            $id = db_query("SELECT id FROM {filedepot_filesubmissions} WHERE drupal_fid=:fid", array(':fid' => $file->fid))->fetchField();
            if ($id > 0) {
              $unapprovedfile = TRUE; // Found a record for this file in the submission queue
            }
          }
          if ($unapprovedfile === FALSE AND $filedepot_fid === FALSE) {

            // A new file was attached via the Drupal UI or external API - need to process
            $ext = end(explode(".", $file->filename));

            // Create filedepot record for file and set status of file to 1 - online
            $sql = "INSERT INTO {filedepot_files} (cid,fname,title,description,version,drupal_fid,size,mimetype,extension,submitter,status,date) "
            . "VALUES (:cid,:fname,:title,:desc,1,:fid,:size,:mime,:ext,:uid,1,:time)";
            db_query($sql,
            array(
              ':cid' => $node->folder,
              ':fname' => $file->filename,
              ':title' => $file->filename,
              ':desc' => 'TODO',
              ':fid' => $file->fid,
              ':size' => $file->filesize,
              ':mime' => $file->filemime,
              ':ext' => $ext,
              ':uid' => $user->uid,
              ':time' => time(),
            ));

            // Get fileid for the new file record
            $args = array(
              ':cid' => $node->folder,
              ':uid' => $user->uid,
            );
            $newfid = db_query_range("SELECT fid FROM {filedepot_files} WHERE cid=:cid AND submitter=:uid ORDER BY fid DESC", 0, 1, $args)->fetchField();

            db_query("INSERT INTO {filedepot_fileversions} (fid,fname,version,notes,size,date,uid,status)
            VALUES (:fid,:fname,'1','',:size,:time,:uid,1)",
            array(
              ':fid' => $newfid,
              ':fname' => $file->filename,
              ':size' => $file->filesize,
              ':time' => time(),
              ':uid' => $user->uid,
            ));

            // Update related folders last_modified_date
            $workspaceParentFolder = filedepot_getTopLevelParent($node->folder);
            filedepot_updateFolderLastModified($workspaceParentFolder);

          }

        }

        // Need to clear the cache as the node will still have the original file name
        field_cache_clear();

      }
    }
  }

}


/**
 * Implemenation of hook_load
 * @param node object to load additional information for
 * @return object with extra filedepot folder fields
 */
function filedepot_load($nodes) {
  $result = db_query('SELECT nid, cid as folder, pid as parentfolder, description as folderdesc FROM {filedepot_categories} WHERE nid IN (:nids)',
  array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->folder = $record->folder;
    $nodes[$record->nid]->parentfolder = $record->parentfolder;
    $nodes[$record->nid]->folderdesc = $record->folderdesc;
  }
}


/**
 * Implementation of hook_view().
 */
function filedepot_view($node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser) {
    // Using the default view
    $node = node_prepare($node, $teaser);

    $node->title = filter_xss($node->title);
    $node->folderdesc = nl2br(filter_xss($node->folderdesc));
    $node->content['folderdesc'] = array(
      '#value' => theme('item', array('#title' => t('Description'), '#value' => $node->folderdesc)),
    );
    // Now add the parent folder selection
    $parentFolder = db_query("SELECT pid FROM {filedepot_categories} WHERE nid=:nid",
    array(
      ':nid' => $node->nid,
    ))->fetchField();
    if ($parentFolder == 0) {
      $parentFolderName = t('Top Level Folder');
    }
    else {
      $parentFolderName = db_query("SELECT name FROM {filedepot_categories} WHERE cid=:cid",
      array(
        ':cid' => $parentFolder,
      ))->fetchField();
    }

    $node->content['parentfolder'] = array(
      '#value' => theme('item', array('#title' => t('Parent Folder'), '#value' => $parentFolderName)),
      '#weight' => 3,
    );
    $node->content['nexfiles'] = array(
      '#value' => theme('filedepot_files', array('node' => $node)),
      '#weight' => 2,
    );

    // Hide the default node content folder view of the attachements (files)
    unset($node->filedepot_folder_sfile);

  }
  return $node;

}



/**
 * Implementation of hook_insert().
 */
function filedepot_insert($node) {
  $filedepot = filedepot_filedepot();

  if ($filedepot->createFolder($node)) {
    return TRUE;
  }
  else {
    drupal_set_message(t('Error creating folder'), 'error');
    return FALSE;
  }
}

/**
 * Implementation of hook_update().
 */
function filedepot_update($node) {
  db_query("UPDATE {node} set promote = 0 WHERE nid = :nid", array(
    ':nid' => $node->nid,
  ));
  db_query("UPDATE {filedepot_categories} SET pid=:pid,name=:name,description=:desc WHERE nid=:nid",
  array(
    ':pid' => $node->parentfolder,
    ':name' => $node->title,
    ':desc' => $node->folderdesc,
    ':nid' => $node->nid,
  ));
}


/**
 * Implementation of hook_download().
 *
 * $mode:  default is for normal files,
 *         'edit' for the download for edit operation
 *         'moderator' to indicate file is not yet approved - moderator request to download file
 */
function filedepot_download($node, $fid, $version, $mode = '') {
  global $conf, $user;
  $filedepot = filedepot_filedepot();

  $filepath = '';
  $content_disposition = 'attachment';

  if (empty($fid)) {
    watchdog('filedepot', "Download request - null file id");
    return drupal_access_denied();
  }
  elseif ($version == 'incoming') {
    $query = db_query("SELECT drupal_id,orig_filename,title FROM {filedepot_import_queue} WHERE id=:fid",
    array(
      ':fid' => $fid,
    ));
    list($dfid, $fname, $filetitle) = array_values($query->fetchAssoc());
    if ($dfid > 0) {
      $filepath = db_query("SELECT filepath FROM {files} WHERE fid=:fid",
      array(
        ':fid' => $dfid,
      ))->fetchField();
      if (file_exists($filepath)) {
        $result = db_query("SELECT * FROM {files} WHERE fid= :fid",
        array(
          ':fid' => $dfid,
        ));
        $file = $result->fetchObject();
        $name = mime_header_encode($filetitle);
        $type = mime_header_encode($file->filemime);
        // By default, serve images, text, and flash content for display rather than
        // download. Or if variable 'filefield_inline_types' is set, use its patterns.
        $inline_types = variable_get('filefield_inline_types', array('^text/', '^image/', 'flash$'));
        $disposition = 'attachment';
        foreach ($inline_types as $inline_type) {
          // Exclamation marks are used as delimiters to avoid escaping slashes.
          if (preg_match('!' . $inline_type . '!', $file->filemime)) {
            $disposition = 'inline';
          }
        }

        watchdog('filedepot', "Download of incoming file: @file (!fid) by user @user",
          array('@file' => $filetitle, '!fid' => $fid, '@user' => $user->name));

        $headers = array(
          'Content-Type: ' . $type . '; name="' . $filetitle . '"',
          'Content-Length: ' . $file->filesize,
          'Content-Disposition: ' . $disposition . '; filename="' . $filetitle . '"',
          'Cache-Control: private',
        );
        if (count($headers)) {
          file_transfer($filepath, $headers);
        }

      }
      else {
        return drupal_not_found();
      }
    }
    else {
      watchdog('filedepot', "Download request for incoming file invalid");
      return drupal_access_denied();
    }

  }
  else {
    $version = intval($version);
    if ($version > 0) {
      $fname = db_query("SELECT fname FROM {filedepot_fileversions} WHERE fid=:fid AND version=:version",
      array(':fid' => $fid, ':version' => $version))->fetchField();
      $query = db_query("SELECT cid,drupal_fid,title FROM {filedepot_files} WHERE fid=:fid",
      array(':fid' => $fid));
      $rec = $query->fetchAssoc();
      if ($rec === FALSE) {
        watchdog('filedepot', "Download request - invalid file reference");
        return drupal_access_denied();
      }
      else {
        list($cid, $drupal_fid, $filetitle) = array_values($rec);
      }
    }
    elseif ($mode == 'moderator') {
      $query = db_query("SELECT cid,drupal_fid,fname,tempname,title FROM {filedepot_filesubmissions} WHERE id=:fid",
      array(':fid' => $fid));
      $rec = $query->fetchAssoc();
      if ($rec === FALSE) {
        watchdog('filedepot', "Download request for moderated file - invalid file reference");
        return drupal_access_denied();
      }
      list($cid, $drupal_fid, $fname, $tempname, $filetitle) = array_values($rec);
    }
    else {
      $query = db_query("SELECT cid,drupal_fid,fname,title FROM {filedepot_files} WHERE fid=:fid",
      array(':fid' => $fid));
      $rec = $query->fetchAssoc();
      if ($rec === FALSE) {
        watchdog('filedepot', "Download request - invalid file reference");
        return drupal_access_denied();
      }
      else {
        list($cid, $drupal_fid, $fname, $filetitle) = array_values($rec);
      }
    }
    if ($cid == 0) {
      watchdog('filedepot', "Download request - null category id");
      return drupal_access_denied();
    }
    else {
      $file = file_load($drupal_fid);
      list($scheme, $target) = explode('://', $file->uri, 2);
      if ($file === FALSE) {
        watchdog('filedepot', "Download request for file:$fname ($fid), file id:$drupal_fid invalid - folder ($cid) for user: {$user->name}");
        return drupal_access_denied();
      }
      if ($mode == 'moderator') {
        $filepath = $filedepot->root_storage_path . "{$cid}/submissions/{$tempname}";
      }
      else {
        $filepath = $filedepot->root_storage_path . "{$cid}/{$fname}";
      }

      if ($filedepot->checkPermission($cid, 'view') === FALSE) {
        watchdog('filedepot', "Download request for incoming file invalid access to folder ($cid) for user: {$user->name}");
        return drupal_access_denied();
      }

      if (file_exists($filepath) AND !is_dir($filepath)) {
        if ($mode == 'moderator') {
          $name = mime_header_encode($filetitle);
          $type = mime_header_encode($file->filemime);
        }
        else {
          if (db_query("SELECT COUNT(*) FROM {filedepot_downloads} WHERE uid=:uid AND fid=:fid",
          array(':uid' => $user->uid, ':fid' => $fid))->fetchField() == 0) {
            db_query("INSERT into {filedepot_downloads} (uid,fid,remote_ip,date) VALUES (:uid,:fid,:remote_ip,:time)",
            array(
              ':uid' => $user->uid,
              ':fid' => $fid,
              ':remote_ip' => $_SERVER['REMOTE_ADDR'],
              ':time' => time(),
            ));
          }
          $name = mime_header_encode($filetitle);
          $type = mime_header_encode($file->filemime);
        }

        watchdog('filedepot', "Download of file: @file (!fid), version !version by user @user",
          array('@file' => $filetitle, '!fid' => $fid, '!version' => $version, '@user' => $user->name));


        /* We can assume the repository is setup using Drupal's private filesystem
         * The file_download function will invole all modules with a hook_file_download()
         * We need to add our hook to test if this is a download for edit and add
         * the extra MIME header and altered filename for tracking
         */
        file_download($scheme, $target);

      }

    }
  }

}

/**
 * Implementation of hook_entity_insert().
 *
 * If OG Mode enabled, create a new top level filedepot folder
 */
function filedepot_entity_insert($entity, $type) {
  global $user;

  if ($type == 'group' AND $entity->gid > 0) {
    if (variable_get('filedepot_auto_create_group_rootfolder_enabled', 0) == 1) {
      /* Admin is being added to the OG Group. This happens when the group is first created but
       * will also occur if another admin is added so we need to test for this.
       * If first Admin - new Group being created then create a new ROOT level filedepot folder */
      if (db_query("SELECT count(*) FROM {filedepot_categories} WHERE group_nid=:gid AND pid=0", array(':gid' => $entity->gid))->fetchField() == 0) {
        $node = new stdClass();
        $node->type = 'filedepot_folder';
        node_object_prepare($node);
        $node->language = LANGUAGE_NONE;
        $node->uid = $user->uid;
        $node->name = $user->name;
        $node->title = check_plain($entity->label);
        $node->filedepot_folder_desc[LANGUAGE_NONE][0]['value'] = 'Group Root Folder';
        $node->parentfolder = 0;
        $node->inherit = 0;
        $node->gid = $entity->gid;
        node_save($node);
        watchdog('filedepot',"New Organic Group created @name - new filedepot folder created.", array('@name' => $entity->label));
      }
    }
  }

}

/**
 * Implementation of hook_entity_insert().
 *
 * If OG Mode enabled, delete any folder access perms and tag access records
 */
function filedepot_entity_delete($entity, $type) {
  if ($type == 'group' AND $entity->gid > 0) {
    $result = db_query("SELECT accid, catid FROM {filedepot_access} WHERE permtype = 'group' AND permid = :id", array(':id' => $entity->gid));
    if ($result) {
      module_load_include('php', 'filedepot', 'nexcloud.class');
      $nexcloud = new filedepotTagCloud();
      foreach ($result as $rec) {
        db_query("DELETE FROM {filedepot_access} WHERE accid=:recid", array(':recid' => $rec->accid));
        db_query("UPDATE {filedepot_usersettings} set allowable_view_folders = ''");
        // For this folder - update the access metrics now that a permission has been removed
        $nexcloud->update_accessmetrics($rec->catid);
      }
    }
  }
}



/**
 * Implements hook_file_delete().
 */
function filedepot_file_delete($file) {
  global $user;

  if (isset($file->version)) {
    watchdog('filedepot', "Deleting file return as version {$file->version} is set");
    return;
  }

  $filedepot = filedepot_filedepot();

  watchdog('filedepot', "Deleting file {$file->fid}");

  // Additional testing for the nexcloud instance because this method is also called from filedepot_uninstall()
  if (function_exists('filedepot_nexcloud')) {
    $nexcloud =  filedepot_nexcloud();
  }
  else {
    module_load_include('php', 'filedepot', 'nexcloud.class');
    $nexcloud = new filedepotTagCloud();
  }

  $fid = db_query("SELECT fid FROM {filedepot_files} WHERE drupal_fid=:dfid", array(':dfid' => $file->fid))->fetchField();

  if ($user->uid > 0 AND $fid > 0) {
    // Check if user is the owner or has category admin rights
    $query = db_query("SELECT cid,drupal_fid,title,version,submitter,size FROM {filedepot_files} WHERE fid=:fid", array(':fid' => $fid));
    list($cid, $drupal_fid, $title, $version, $submitter, $fsize) = array_values($query->fetchAssoc());
    if ($submitter == $user->uid OR $filedepot->checkPermission($cid, 'admin')) {

      watchdog('filedepot', "Deleting file $fid from folder $cid");

      $nexcloud->clear_tags($fid); // Clear all tags and update metrics for this item

      /* Remove any file versions */
      $query = db_query("SELECT id, version, drupal_fid FROM {filedepot_fileversions} WHERE fid=:fid", array(':fid' => $fid));
      while ($A = $query->fetchAssoc()) {
        watchdog('filedepot', "Deleting file version:{$A['version']} ({$A['id']}), $fid from folder $cid, Drupal fid: {$A['drupal_fid']}");
        $file = file_load($A['drupal_fid']);
        if ($file) {
          file_usage_delete($file, 'filedepot');
          $file->version = $A['version'];
          file_delete($file);
        }
        db_query("DELETE FROM {filedepot_fileversions} WHERE id=:id", array(':id' => $A['id']));
      }

      db_query("DELETE FROM {filedepot_files} WHERE fid=:fid", array(':fid' => $fid));
      db_query("DELETE FROM {filedepot_notifications} WHERE fid=:fid", array(':fid' => $fid));

      return TRUE;
    }
    else {
      watchdog('filedepot', 'Unable to delete file. User: @user, file: @fid and Folder: @folder',
      array('@user' => $user->uid, '@fid' => $fid, '@folder' => $cid));
      $GLOBALS['alertMsg'] = 'No permission to remove selected file(s)';
      return FALSE;
    }

  }
  else {
    return FALSE;
  }


}

/**
 * Implements hook_file_download().
 */
function filedepot_file_download() {
  global $user;

  $op = arg(0);
  if ($op == 'filedepot_download') {
    $fid = intval(arg(2));
    $version = intval(arg(3));
    $mode = arg(4);
  }
  elseif ($op == 'system') {
    // Download of node attachment from native drupal view content page - folder node view
    if (arg(4) == 'submissions') {
      $tempname = arg(5);
      $fid = db_query("SELECT id FROM {filedepot_filesubmissions} WHERE tempname=:name", array(':name' => $tempname))->fetchField();
      if ($fid === FALSE) {
        watchdog('filedepot', "Download request for moderated file - invalid file reference");
        return -1;
      }
      $version = 1;
      $mode = 'moderator';
    }
    else {
      $cid = arg(3);
      $fname = arg(4);
      $fid = db_query("SELECT fid FROM {filedepot_files} WHERE fname=:fname AND cid=:cid", array(':fname' => $fname, ':cid' => $cid))->fetchField();
      if ($fid === FALSE) {
        watchdog('filedepot', "Download request for file - invalid file reference");
        return -1;
      }
      $version = db_query("SELECT version FROM {filedepot_files} WHERE fid=:fid", array(':fid' => $fid))->fetchField();
      $mode = '';
    }
  }

  if ($fid > 0) {
    $headers = array();
    /* Check if user has access to folder to download file */
    $cid = db_query("SELECT cid FROM {filedepot_files} WHERE fid=:fid", array(':fid' => $fid))->fetchField();
    if (!isset($version) OR empty($version)) {
      $version = db_query("SELECT version FROM {filedepot_files} WHERE fid=:fid", array(':fid' => $fid))->fetchField();
    }
    $filedepot = filedepot_filedepot();
    $ret = $filedepot->checkPermission($cid, 'view');
    if ($filedepot->checkPermission($cid, 'view') === FALSE) {
      return -1;
    }

    if ($mode == 'edit') {

      if ($version > 0) {
        $fname = db_query("SELECT fname FROM {filedepot_fileversions} WHERE fid=:fid AND version=:version",
        array(':fid' => $fid, ':version' => $version))->fetchField();
        $query = db_query("SELECT cid,drupal_fid,title FROM {filedepot_files} WHERE fid=:fid",
        array(':fid' => $fid));
        $rec = $query->fetchAssoc();
        if ($rec === FALSE) {
          watchdog('filedepot', "Download request - invalid file reference");
          return -1;
        }
        else {
          list($cid, $drupal_fid, $filetitle) = array_values($rec);
        }
      }
      elseif ($mode == 'moderator') {
        $query = db_query("SELECT cid,drupal_fid,fname,tempname,title FROM {filedepot_filesubmissions} WHERE id=:fid",
        array(':fid' => $fid));
        $rec = $query->fetchAssoc();
        if ($rec === FALSE) {
          watchdog('filedepot', "Download request for moderated file - invalid file reference");
          return -1;
        }
        list($cid, $drupal_fid, $fname, $tempname, $filetitle) = array_values($rec);
      }
      else {
        $query = db_query("SELECT cid,drupal_fid,fname,title FROM {filedepot_files} WHERE fid=:fid",
        array(':fid' => $fid));
        $rec = $query->fetchAssoc();
        if ($rec === FALSE) {
          watchdog('filedepot', "Download request - invalid file reference");
          return -1;
        }
        else {
          list($cid, $drupal_fid, $fname, $filetitle) = array_values($rec);
        }
      }

      $file = file_load($drupal_fid);

      // Code pulled from file_get_content_headers() to set disposition -- need to alter the filename
      $disposition = 'attachment';
      // By default, serve images, text, and flash content for display rather than
      // download. Or if variable 'filefield_inline_types' is set, use its patterns.
      $inline_types = variable_get('filefield_inline_types', array('^text/', '^image/', 'flash$'));
      $disposition = 'attachment';
      foreach ($inline_types as $inline_type) {
        // Exclamation marks are used as delimiters to avoid escaping slashes.
        if (preg_match('!' . $inline_type . '!', $file->filemime)) {
          $disposition = 'inline';
        }
      }

      $type = mime_header_encode($file->filemime);
      $ext = end(explode(".", $filetitle));
      $pos = strpos($filetitle, ".");

      // Generate a 15 character hash value (token) and append to filename
      // Create a unique filename for download and save the token for compare use on upload
      $filename = substr($filetitle, 0, $pos);
      $hash = md5(uniqid(rand()));
      $token = substr($hash, 0, 15);
      $newfilename = $filename . '{' . $token . 't}' . ".$ext";
      $newfilename = str_replace(' ', '+', $newfilename);

      //Update the MimeHeader that will be used to send the file to the browser - need to include token in filename
      $name = mime_header_encode($newfilename);

      $sql  = "INSERT INTO {filedepot_export_queue} (orig_filename,token,extension,timestamp,uid,fid) values (:orig_fname,:token,:extension,:time,:uid,:fid)";
      db_query($sql, array(
        ':orig_fname' => $filetitle,
        ':token' => $token,
        ':extension' => $ext,
        ':time' => time(),
        ':uid' => $user->uid,
        ':fid' => $fid,
      ));

      // Change file status to locked - being edited
      db_query("UPDATE {filedepot_files} SET status = 2, status_changedby_uid = :uid WHERE fid=:fid",
      array(':uid' => $user->uid, ':fid' => $fid));

      $headers = array(
        'Content-Type' => $type . '; name="' . $name . '"',
        'Content-Length' => $file->filesize,
        'Content-Disposition' => $disposition . '; filename="' . $name . '"',
        'Cache-Control' => 'private',
      );

    }
    elseif ($version > 0) {

      if ($mode == 'moderator') {
        //$query = db_query("SELECT cid,drupal_fid,fname,tempname,title FROM {filedepot_filesubmissions} WHERE id=:fid",
        $query = db_select('filedepot_filesubmissions', 'a');
        $query->fields('a', array('cid', 'title', 'tempname', 'drupal_fid'));
        $query->condition('a.id', $fid, '=');
        list($cid, $filetitle, $fname, $dfid) = array_values($query->execute()->fetchAssoc());
      }
      else {
        $query = db_select('filedepot_files', 'a');
        $query->join('filedepot_fileversions', 'b', 'b.fid = a.fid');
        $query->fields('a', array('cid', 'title'));
        $query->fields('b', array('fname', 'drupal_fid'));
        $query->condition('a.fid', $fid, '=');
        $query->condition('b.version', $version, '=');
        list($cid, $filetitle, $fname, $dfid) = array_values($query->execute()->fetchAssoc());
      }

      $file = file_load($dfid);
      if ($file) {
        // Code pulled from file_get_content_headers() to set disposition -- need to alter the filename
        $disposition = 'attachment';
        // By default, serve images, text, and flash content for display rather than
        // download. Or if variable 'filefield_inline_types' is set, use its patterns.
        $inline_types = variable_get('filefield_inline_types', array('^text/', '^image/', 'flash$'));
        $disposition = 'attachment';
        foreach ($inline_types as $inline_type) {
          // Exclamation marks are used as delimiters to avoid escaping slashes.
          if (preg_match('!' . $inline_type . '!', $file->filemime)) {
            $disposition = 'inline';
          }
        }

        watchdog('filedepot', "Download of file: @file (!fid), version !version by user @user",
          array('@file' => $file->filename, '!fid' => $fid, '!version' => $version, '@user' => $user->name));

        $type = mime_header_encode($file->filemime);
        $headers = array(
          'Content-Type' => $type . '; name="' . $filetitle . '"',
          'Content-Length' => $file->filesize,
          'Content-Disposition' => $disposition . '; filename="' . $filetitle . '"',
          'Cache-Control' => 'private',
        );
      }
      else {
        watchdog('filedepot', "Download attempt failed for file: $fid, node: $dfid, version:$version ");
        return -1;
      }
    }
    return $headers;

  }
  else {
    watchdog('filedepot', "Download request for moderated file - invalid file reference");
    return -1;
  }

}


function filedepot_node_delete($node) {
  if ($node->type == 'filedepot_folder') {
    $cid = db_query("SELECT cid FROM {filedepot_categories} WHERE nid=:nid",
    array('nid' => $node->nid))->fetchField();
    if ($cid) {
      $filedepot = filedepot_filedepot();
      $filedepot->deleteFolder($cid);
    }
  }
}


/**
* Implements hook_mail().
*/
function filedepot_mail($key, &$message, $params) {
  global $user;

  $filedepot = filedepot_filedepot();
  $target_users = $params['target_users'];  // Array of user id's the email will be sent to

  $domain = preg_replace('`^www.`', '', $_SERVER['HTTP_HOST']);
  $default_to_email = "noreply@$domain";
  $message['to'] =  variable_get('filedepot_email_to', $default_to_email);

  $id = $params['fid'];
  if (intval($id) == 0 OR count($target_users) == 0) {
    watchdog('filedepot', "Error in filedepot_mail: invalid item id or empty distribution list");
    return FALSE;
  }

  switch ($key) {
    case FILEDEPOT_NOTIFY_NEWFILE: // New File added where $id = file id. Send to all subscribed users
      $sql = "SELECT file.fid,file.fname,file.cid,file.submitter,category.name FROM {filedepot_files} file, "
      . "{filedepot_categories} category WHERE file.cid=category.cid and file.fid=:fid";
      $query = db_query($sql, array(':fid' => $id));
      list($fid, $fname, $cid, $submitter, $catname) = array_values($query->fetchAssoc());
      $submitter_name = db_query("SELECT name FROM {users} WHERE uid=:uid", array(':uid' => $submitter))->fetchField();
      $link = url('filedepot', array('query' => array('cid' => $cid, 'fid' => $fid), 'absolute' => true));
      $message['subject'] = variable_get('site_name', '') . ' - ' . t('New Document Management Update');
      $message_args = array(
        '@@name' => $submitter_name,
        '!file' => $fname,
        '!folder' => $catname,
        '!link' => url($link, array('absolute' => TRUE)),
      );
      $message_body = t('Site member @@name has submitted a new file (!file)!bp Folder: !folder. The file can be accessed at !link', $message_args);
      $message_body .= "\n\n" . t('You are receiving this because you requested to be notified') . "\n\n" . t('Thank You') . "\n";
      $message['body'][] = $message_body;
      break;

    case FILEDEPOT_NOTIFY_APPROVED: // File submission being approved by admin where $id = file id. Send only to user
      $sql = "SELECT file.fid,file.fname,file.cid,file.submitter,category.name FROM {filedepot_files} file, "
      . "{filedepot_categories} category WHERE file.cid=category.cid and file.fid=:fid";
      $query = db_query($sql, array(':fid' => $id));
      list($fid, $fname, $cid, $submitter, $catname) = array_values($query->fetchAssoc());
      $submitter_name = db_query("SELECT name FROM {users} WHERE uid=:uid", array(':uid' => $submitter))->fetchField();
      $link = url('filedepot', array('query' => array('cid' => $cid, 'fid' => $fid), 'absolute' => true));
      $message['subject'] = variable_get('site_name', '') . ' - ' . t('New File Submission Approved');
      $message_args = array(
        '@@name' => $submitter_name,
        '!file' => $fname,
        '!folder' => $catname,
        '!link' => url($link, array('absolute' => TRUE)),
      );
      $message_body = t('Site member @@name: your file (!file) in folder: !folder has been approved and can be accessed !link', $message_args);
      $message_body .= "\n\n" . t('You are receiving this because you requested to be notified') . "\n\n" . t('Thank You') . "\n";
      $message['body'][] = $message_body;
      break;

    case FILEDEPOT_NOTIFY_REJECT: // File submission being declined by admin where $id = new submission record id. Send only to user
      $fname = db_query("SELECT fname FROM {filedepot_filesubmissions} WHERE id=:fid", array(':fid' => $id))->fetchField();
      $submitter = db_query("SELECT submitter FROM {filedepot_filesubmissions} WHERE id=:fid", array(':fid' => $id))->fetchField();
      $message['subject'] = variable_get('site_name', '') . ' - ' . t('New File Submission Cancelled');
      $message_body = t('Your recent file submission: !file, was not accepted',  array('!file' => $fname)) . "\n\n";
      $message_body .= t('Thank You') . "\n";
      $message['body'][] = $message_body;
      break;

    case FILEDEPOT_NOTIFY_ADMIN: // New File Submission in queue awaiting approval
      $sql = "SELECT file.fname,file.cid,file.submitter,category.name FROM {filedepot_filesubmissions} file , "
      . "{filedepot_categories} category WHERE file.cid=category.cid and file.id=:fid";
      $query = db_query($sql, array(':fid' => $id));
      list($fname, $cid, $submitter, $catname) = array_values($query->fetchAssoc());
      $submitter_name = db_query("SELECT name FROM {users} WHERE uid=:uid", array(':uid' => $submitter))->fetchField();
      $message_args = array(
        '@@name' => $submitter_name,
        '!file' => $fname,
        '!folder' => $catname,
      );
      $message['subject'] = variable_get('site_name', '') . ' - ' . t('New File Submission requires Approval');
      $message_body = t('Site member @@name has submitted a new file (!file) for folder !folder that requires approval', $message_args);
      $message_body .= "\n\n" . t('Thank You') . "\n";
      $message['body'][] = $message_body;
      break;

    case FILEDEPOT_BROADCAST_MESSAGE:
      $submitter = $user->uid;
      $sql = "SELECT file.title,file.cid FROM {filedepot_files} file WHERE file.fid=:fid";
      $query = db_query($sql, array(':fid' => $id));
      list($fname, $cid) = array_values($query->fetchAssoc());
      $message['subject'] = variable_get('site_name', '') . ' - ' . t('Broadcast Notification');
      $message_body = $params['comment'] . "\n\n";
      $link = url('filedepot', array('query' => array('cid' => $cid), 'absolute' => true));
      $message_body .= t('The file: !filename can be accessed at !link', array('!filename' => $fname, '!link' => $link)) . "\n\n";
      $message_body .= t('You are receiving this broadcast alert, because your notification setting is enabled.');
      $message['body'][] = $message_body;
    break;

  }

  $lastuser = '';
  $distribution = array();
  /* Send out Notifications to all users on distribution using Bcc - Blind copy to hide the distribution
   * To send to complete distribution as one email and not loop thru distribution sending individual emails
   */
  foreach ($target_users as $target_uid) {
    if ($target_uid != $lastuser) {
      $query = db_query("SELECT name, mail FROM {users} WHERE uid=:uid", array(':uid' => $target_uid));
      $rec = $query->fetchObject();
      if (!empty($rec->mail)) {
        $distribution[] = $rec->mail;
        $sql = "INSERT INTO {filedepot_notificationlog} (target_uid,submitter_uid,notification_type,fid,cid,datetime) "
        . "VALUES (:tuid,:uid,:type,:id,:cid,:time )";
        db_query($sql, array(':tuid' => $target_uid, ':uid' => $submitter, ':type' => $key, ':id' => $id, ':cid' => $cid, ':time' => time()));
      }
      $lastuser = $target_uid;
    }
  }
  if (count($distribution >= 1)) {
    $message['headers']['Bcc'] = implode(',', $distribution);
    $filedepot->message = count($distribution);
    return TRUE;
  }
  else {
    return FALSE;
  }

}

/* Theme functions that need to be available for initial loading of the module view */
function template_preprocess_filedepot_main_page(&$variables) {
  global $base_url, $user;

  $filedepot = filedepot_filedepot();
  if ($filedepot->ogmode_enabled AND $filedepot->ogrootfolder > 0 AND !$filedepot->checkPermission($filedepot->ogrootfolder, 'view')) {
    drupal_set_message('You do not have access to this groups documents');
    drupal_goto();
  }

  module_load_include('php', 'filedepot', 'lib-common');

  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');

  drupal_add_js(array(
    'filedepot-newfile-dialog-style' => array(
      'modalSize' => array(
        'type' => 'scale',
      ),
      'closeText' => '',
      'closeImage' => '',
    ),
  ), 'setting');

  drupal_add_js(array(
    'filedepot-newfolder-dialog-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 625,
        'height' => 330,
      ),
      'closeText' => '',
      'closeImage' => '',
    ),
  ), 'setting');


  // Add CTools' javascript to the page.
  ctools_modal_add_js();

  if (isset($variables['cid'])) {
    $folderid = $variables['cid'];
  }
  elseif (isset($_GET['cid'])) {
    $folderid = $_GET['cid'];
  }
  elseif (!isset($_GET['cid'])) {
    $folderid = 0;
  }
  if (!isset($_GET['fid'])) {
    $_GET['fid'] = 0;
  }

  $variables['yui_base_url'] = variable_get('filedepot_yui_baseurl', 'http://yui.yahooapis.com/2.7.0/build/');
  $variables['title']                 = '';
  $variables['initialfid']            = intval($_GET['fid']);
  $variables['initialcid']            = intval($folderid);
  $variables['initialop']             = '';
  $variables['initialparm']           = '';
  $variables['site_url']              = $base_url;
  $variables['ajax_server_url']       = url('filedepot_ajax');
  $variables['actionurl_dir']         = base_path() . drupal_get_path('module', 'filedepot');
  $variables['filedepot_javascript_url'] = base_path() . drupal_get_path('module', 'filedepot') . '/js/';
  $variables['yui_uploader_url'] = libraries_get_path('yui_uploader.swf');
  if (!user_is_logged_in()) {
    $variables['alert_message']       = 'You are not Logged in';
  }
  else {
    $variables['alert_message']       = '';
    $variables['show_alert']          = 'none';
  }

  $variables['toolbarform']           = theme('filedepot_toolbar_form');
  // Set the session id to address a bug with Firefox and Mozilla with the YUI Uploader not posting $_COOKIES
  $variables['session_id'] = db_query("SELECT sid FROM {sessions} WHERE uid = :uid",
  array(':uid' => $user->uid))->fetchField();

  $variables['tagcloud'] = theme('filedepot_tagcloud');
  $adminFolders = filedepot_recursiveAccessOptions('admin');
  $uploadFolders = filedepot_recursiveAccessOptions(array('upload', 'upload_dir'));
  if (!empty($adminFolders)) {
    $variables['show_newfolder'] = 'true';
  }
  elseif ($filedepot->ogmode_enabled AND $filedepot->checkPermission($filedepot->ogrootfolder, 'admin')) {
    $variables['show_newfolder'] = 'true';
  }
  else {
    $variables['show_newfolder'] = 'false';
  }
  if (empty($uploadFolders)) {
    $variables['show_upload'] = 'false';
  }
  else {
    $variables['show_upload'] = 'true';
  }

}

/**
 * Theme function that is used when displaying the files via the native Drupal node view.
 */
function theme_filedepot_files($node) {
  $filedepot = filedepot_filedepot();

  $layout_url = base_path() . drupal_get_path('module', 'filedepot');
  $retval = '';
  $cid = db_query("SELECT cid FROM {filedepot_categories} WHERE nid=:nid",
  array(':nid' => $node->nid))->fetchField();
  if ($cid > 0) {
    $retval = theme('filedepot_native_filelisting_header');
    $query = db_query("SELECT fid,fname,extension as ext FROM {filedepot_files} WHERE cid=:cid",
    array(':cid' => $cid));
    while ($A = $query->fetchAssoc()) {
      if (array_key_exists($A['ext'], $filedepot->iconmap)) {
        $icon = $filedepot->iconmap[$A['ext']];
      }
      else {
        $ext = end(explode(".", $A['fname']));
        if (array_key_exists($ext, $filedepot->iconmap)) {
          $icon = $filedepot->iconmap[$ext];
        }
        else {
          $icon = $filedepot->iconmap['default'];
        }
      }
      $icon = "{$layout_url}/css/images/${icon}";
      $filelink = l($A['fname'], "filedepot_download/{$node->nid}/{$A['fid']}",
      array('attributes' => array('title' => t('Download File'))));
      $retval .= theme('filedepot_native_filerecord', array('icon' => $icon, 'fileline' => $filelink));
    }
  }

  return $retval;
}


function template_preprocess_filedepot_tagcloud(&$variables) {
  global $user;
  $filedepot = filedepot_filedepot();
  $nexcloud =  filedepot_nexcloud();
  $variables['tagwords'] = '';

  $roleids = implode(',', array_keys($user->roles));
  if ($filedepot->ogenabled) {
    $groupids = implode(',', array_keys(og_get_entity_groups('user', $user)));
  }
  else {
    $groupids = '';
  }
  $sql  = "SELECT metric from {nextag_metrics} WHERE type=:type ";
  // Filedepot Admin's should be able to view all tags
  if (!user_access('administer filedepot', $user)) {
    $sql .= "AND roleid IN ($roleids) ";
  }
  if (!empty($groupids)) {
    $sql .= "OR groupid in ($groupids) ";
  }
  $sql .= "ORDER BY metric DESC limit 1";
  $qmaxm = db_query($sql, array(':type' => $nexcloud->_type));
  $rec = $qmaxm->fetchAssoc();

  $tags = 0;
  if ($rec) {
    list($maxm) = array_values($rec);
    $sql = "SELECT a.tagid,b.tagword,a.metric from {nextag_metrics} a ";
    $sql .= "LEFT JOIN {nextag_words} b ON a.tagid=b.id ";
    $sql .= "WHERE b.tagword is not NULL AND type='{$nexcloud->_type}' ";
    // Filedepot Admin's should be able to view all tags
    if (!user_access('administer filedepot', $user)) {
      $sql .= "AND roleid IN ($roleids) ";
    }
    if (!empty($groupids)) {
      $sql .= "OR groupid in ($groupids) ";
    }
    if (!empty($nexcloud->_activetags)) {
      $sql .= "AND a.tagid NOT in ({$nexcloud->_activetags}) ";
    }
    $sql .= "GROUP BY tagid ORDER BY a.tagid ASC, metric DESC";
    $query = db_query($sql);
    while ($A = $query->fetchAssoc()) {
      $variables['tagwords'] .= theme('filedepot_tagcloud_record', array('rec' => $A, 'maxm' => $maxm));
      $tags++;
    }
  }
  if ($tags == 0) {
    $variables['tagwords'] = t('No tagwords defined');
  }

}

function template_preprocess_filedepot_tagcloud_record(&$variables) {
  $nexcloud =  filedepot_nexcloud();
  $rec = $variables['rec'];
  // Using a Linear Interpolation equation to create a relative font size
  $ranking = $nexcloud->_fontmultiplier * ( 1.0 + ( 1.5 * $rec['metric'] - ($variables['maxm'] / 2) ) / $variables['maxm']);
  $variables['fontsize'] = $ranking;
  $variables['metric'] = $rec['metric'];
  $variables['tag'] = filter_xss($rec['tagword']);
}


/* Handle the OG module hooks with a user is added or deleted from a group
 * Need to remove the users cached folder permissions.
 * If user is being deleted from a group, then I need to check their last folders
 * and update (remove folder if no longer access) as required.
 */
function filedepot_og($op, $gid, $uid, $args) {
  $modified = FALSE;
  if (!empty($uid) and !empty($gid)) {
    switch ($op) {
      case 'user insert':
      case 'user update':
        if (isset($args['is_active']) && $args['is_active']) {
          $modified = TRUE;
        }
        break;

      case 'user delete':
        $resfolders = db_query("SELECT catid as cid FROM {filedepot_access} WHERE permtype='group' and permid=:gid AND view=1",
        array(':gid' => $gid));
        /* foreach folder the user had access to via the group permission - remove from the recent folders */
        while ($A = $resfolders->fetchAssoc()) {
          db_query("DELETE FROM {filedepot_recentfolders} WHERE cid=:cid AND uid=:uid",
          array(
            ':cid' => $A['cid'],
            ':uid' => $uid,
          ));
        }
        $modified = TRUE;
        break;
    }

    if ($modified) {
      // Clear the cached user folder permissions
      db_query("UPDATE {filedepot_usersettings} set allowable_view_folders = '' WHERE uid=:uid",
      array(':uid' => $uid));
    }
  }
}


function filedepot_newfile_dialog($js = NULL) {
  // Fall back if $js is not set.
  if (!$js) {
    return drupal_get_form('filedepot_newfile_form');
  }

  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  $form_state = array(
    'title' => t('New File'),
    'ajax' => TRUE,
    'has_file_element' => TRUE,
  );
  $output = ctools_modal_form_wrapper('filedepot_newfile_form', $form_state);

  if ($form_state['executed'] && ($js)) {
    $cid = intval($form_state['values']['filedepot_parentfolder']);
    $commands = array();
    $commands[] = ctools_ajax_command_redirect("filedepot/folder/$cid");
    $commands[] = ctools_modal_command_dismiss(t('Upload Success'));
    // In typical usage you will do something else here, such as update a
    // div with HTML or redirect the page based upon the results of the modal
    // form.
    print ajax_render($commands);
    exit;
  }

  print ajax_render($output);
  exit;

}


function filedepot_newfile_form($form, &$form_state) {
  global $user;

  $filedepot = filedepot_filedepot();

  // Using the ctools cache functionality to save which folder the user has selected
  ctools_include('object-cache');
  $cid = ctools_object_cache_get('filedepot', 'folder');

  module_load_include('php', 'filedepot', 'lib-common');

  $form['filedepot_file'] = array(
    '#type' => 'managed_file',
    '#title' => t('Choose a file'),
    '#size' => 22,
  );

  $form['filedepot_filename'] = array(
    '#type' => 'textfield',
    '#title' => t('Display Name'),
    '#size' => 34,
  );

  if (user_access('administer filedepot', $user)) {
    $parentFolders = array(0 => 'Top Level Folder');
  }
  else {
    $parentFolders = array();
  }
  $parentFolders += filedepot_recursiveAccessArray(array('upload_dir', 'upload'));

  $form['filedepot_parentfolder'] = array(
    '#type' => 'select',
    '#title' => t('Parent Folder'),
    '#required' => FALSE,
    '#options' => $parentFolders,
    '#default_value' => $cid,
  );

  $form['filedepot_filetags'] = array(
    '#type' => 'textfield',
    '#title' => t('Tags'),
    '#size' => 34,
  );

  $form['filedepot_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#rows' => 2,
  );

  $form['filedepot_version_note'] = array(
    '#type' => 'textarea',
    '#title' => t('Version Notes'),
    '#rows' => 2,
  );

  $form['filedepot_email_notification'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Email Notification'),
    '#options' => array('yes' => t('Yes')),
    '#default_value' => array('yes' => 'yes')
  );

  $form['buttons'] = array(
    '#prefix' => '<div style="text-align:center;">',
    '#suffix' => '</div>',
  );

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload File'),
  );

  $form['buttons']['cancel'] = array(
    '#type' => 'submit',
    '#access' => TRUE,
    '#value' => t('Cancel'),
    '#weight' => 60,
    '#submit' => array('filedepot_ctools_form_cancel'), //This is the name of a function reproduced below
  );

  $form['buttons']['submit']['#submit'][] = 'filedepot_newfile_submit';
  $form['buttons']['submit']['#validate'][] = 'filedepot_newfile_validate';

  return $form;

}

function filedepot_newfile_validate($form, &$form_state) {
  if ($form_state['values']['filedepot_file'] == 0) {
    form_set_error('filedepot_file', t('You must select a valid file'));
  }
  else {
    $filedepot = filedepot_filedepot();
    $file = file_load($form_state['values']['filedepot_file']);
    if ($filedepot->checkFilter($file->filename, $file->filemime) === FALSE) {
      form_set_error('filedepot_file', t('File type not allowed'));
    }
  }
  if ($form_state['values']['filedepot_parentfolder'] == 0) {
    form_set_error('filedepot_parentfolder', t('You must select a valid folder'));
  }
}


/* Submit handler for the filedepot module new file form
 * Need to move the file to the private filedepot directory
 */
function filedepot_newfile_submit($form, &$form_state) {
  global $user;

  $filedepot = filedepot_filedepot();
  module_load_include('php', 'filedepot', 'lib-common');

  $cid = $form_state['values']['filedepot_parentfolder'];
  // Retrieve the upload location - parent folder node id
  $folder_nid = db_query("SELECT nid FROM {filedepot_categories} WHERE cid=:cid", array(':cid' => $cid))->fetchField();
  $node = node_load($folder_nid);

  $upload_direct = $filedepot->checkPermission($cid, 'upload_dir');
  $upload_moderated = $filedepot->checkPermission($cid, 'upload');
  $upload_new_versions = $filedepot->checkPermission($cid, 'upload_ver');
  if (!$upload_direct AND $upload_moderated) { // Admin's have all perms so test for users with upload moderated approval only
    $moderated = TRUE;
    $private_destination = 'private://filedepot/' . $node->folder . '/submissions/';
  }
  else {
    $moderated = FALSE;
    $private_destination = 'private://filedepot/' . $node->folder . '/';
  }

  // Best to call file_prepare_directory() - even if you believe directory exists
  file_prepare_directory($private_destination, FILE_CREATE_DIRECTORY);

  if (isset($form_state['values']['filedepot_file']) AND $form_state['values']['filedepot_file'] > 0) {

    $tags = check_plain($form_state['values']['filedepot_filetags']);
    $file = file_load($form_state['values']['filedepot_file']);
    $ext = end(explode(".", $file->filename));
    list($scheme, $target) = explode('://', $file->uri, 2);

    // The new file should still be in the temporary location so we need to move it
    if ($scheme == 'temporary') {
      $original_filename = $file->filename;
      if ($moderated) { // Save record in submission table and set status to 0 -- not online
        // Generate random file name for newly submitted file to hide it until approved
        $charset = "abcdefghijklmnopqrstuvwxyz";
        $moderated_tmpname = '';
        for ($i = 0; $i < 12; $i++) {
          $moderated_tmpname .= $charset[(mt_rand(0, (drupal_strlen($charset) -1)))];
        }
        $moderated_tmpname .= '.' . $ext;

        $private_uri = $private_destination . $moderated_tmpname;
        $file = file_move($file, $private_uri, FILE_EXISTS_RENAME);
        $file->filename = $original_filename;

        if (isset($form_state['values']['filedepot_filename']) AND !empty($form_state['values']['filedepot_filename'])) {
          $filetitle = check_plain($form_state['values']['filedepot_filename']);
          if (strpos('.', $filetitle) === FALSE) {
            $filetitle = "{$filetitle}.{$ext}";
          }
        }
        else {
          $filetitle = $original_filename;
        }

        // Get name of new file in case it was renamed after the file_move()
        list($scheme, $target) = explode('://', $file->uri, 2);
        $filename = str_replace("filedepot/{$node->folder}/", '', $target);

        // Update folder node - add the file as an attachment
        $file->display = 1;
        $file->description = '';

        // Doing node_save changes the file status to permanent in the file_managed table
        $node->filedepot_folder_file[LANGUAGE_NONE][] = (array) $file; //the name of the field that requires the files
        node_save($node);

        $query = db_insert('filedepot_filesubmissions');
        $query->fields(array('cid', 'fname', 'tempname', 'title', 'description', 'drupal_fid', 'version_note', 'size', 'mimetype', 'extension', 'submitter', 'date', 'tags', 'notify'));
        $query->values(array(
          'cid' => $node->folder,
          'fname' => $file->filename,
          'tempname' => $moderated_tmpname,
          'title' => $filetitle,
          'description' => check_plain($form_state['values']['filedepot_description']),
          'drupal_fid' => $file->fid,
          'version_note' => check_plain($form_state['values']['filedepot_version_note']),
          'size' => $file->filesize,
          'mimetype' => $file->filemime,
          'extension' => $ext,
          'submitter' => $user->uid,
          'date' => time(),
          'tags' => 'TODO',
          'notify' => 1,
        ));
        $newrecid = $query->execute();
        if ($newrecid > 0) {
          // Get id for the new file record
          $newrecid = db_query_range("SELECT id FROM {filedepot_filesubmissions} WHERE cid=:cid AND submitter=:uid ORDER BY id DESC", 0, 1,
          array(':cid' => $node->folder, ':uid' => $user->uid))->fetchField();
          filedepot_sendNotification($newrecid, FILEDEPOT_NOTIFY_ADMIN);
        }
        else {
          drupal_set_message('warning', t('Tags not added - Group or Role assigned view perms required'));
        }

      }
      else {
        $private_uri = $private_destination . $file->filename;
        $file = file_move($file, $private_uri, FILE_EXISTS_RENAME);
        $ext = end(explode(".", $file->filename));

        // Get name of new file in case it was renamed after the file_move()
        list($scheme, $target) = explode('://', $file->uri, 2);
        $filename = str_replace("filedepot/{$node->folder}/", '', $target);

        if (isset($form_state['values']['filedepot_filename']) AND !empty($form_state['values']['filedepot_filename'])) {
          $filetitle = check_plain($form_state['values']['filedepot_filename']);
          if (strpos('.', $filetitle) === FALSE) {
            $filetitle = "{$filetitle}.{$ext}";
          }
        }
        else {
          $filetitle = $original_filename;
        }

        // Update folder node - add the file as an attachment
        $file->display = 1;
        $file->description = '';

        // Doing node_save changes the file status to permanent in the file_managed table
        $node->filedepot_folder_file[LANGUAGE_NONE][] = (array) $file; //the name of the field that requires the files
        node_save($node);

        // Update the file usage table
        file_usage_add($file, 'filedepot', 'node', $node->nid);
        file_usage_delete($file, 'file');

        // filedepot_description

        // Create filedepot record for file and set status of file to 1 - online
        $query = db_insert('filedepot_files');
        $query->fields(array('cid', 'fname', 'title', 'description', 'version', 'drupal_fid', 'size', 'mimetype', 'extension', 'submitter', 'status', 'date'));
        $query->values(array(
          'cid' => $node->folder,
          'fname' => $filename,
          'title' => $filetitle,
          'description' => check_plain($form_state['values']['filedepot_description']),
          'version' => 1,
          'drupal_fid' => $file->fid,
          'size' => $file->filesize,
          'mimetype' => $file->filemime,
          'extension' => $ext,
          'submitter' => $user->uid,
          'status' => 1,
          'date' => time(),
        ));
        $newrecid = $query->execute();
        if ($newrecid > 0) {
          $query = db_insert('filedepot_fileversions');
          $query->fields(array('fid', 'fname', 'drupal_fid', 'version', 'notes', 'size', 'date', 'uid', 'status'));
          $query->values(array(
            'fid' => $newrecid,
            'fname' => $filename,
            'drupal_fid' => $file->fid,
            'version' => 1,
            'notes' => check_plain($form_state['values']['filedepot_version_note']),
            'size' => $file->filesize,
            'date' => time(),
            'uid' => $user->uid,
            'status' => 1,
          ));
          $query->execute();

          // Update the file tags if role or group permission set -- we don't support tag access perms at the user level.
          if ($filedepot->checkPermission($node->folder, 'view', 0, FALSE)) {
            $nexcloud = filedepot_nexcloud();
            if (!$nexcloud->update_tags($newrecid, $tags)) {
              drupal_set_message('warning', t('Tags not added - Group or Role assigned view perms required'));
            }
          }
          else {
            drupal_set_message('warning', t('Tags not added - Group or Role assigned view perms required'));
          }

          // Update related folders last_modified_date
          $workspaceParentFolder = filedepot_getTopLevelParent($node->folder);
          filedepot_updateFolderLastModified($workspaceParentFolder);

          // Send out email notifications of new file added to all users subscribed
          if ($form_state['values']['filedepot_email_notification']['yes'] === 'yes') {
            filedepot_sendNotification($newrecid);
          }

        }
        else {
          drupal_set_message('error', 'Invalid id returned from insert new file record');
        }

      }

    }

    // Need to clear the cache as the node will still have the original file name
    field_cache_clear();

  }


}


function filedepot_newfolder_dialog($js = NULL) {
  // Fall back if $js is not set.
  if (!$js) {
    return drupal_get_form('filedepot_newfolder_form');
  }

  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  $form_state = array(
    'title' => t('Add a new folder'),
    'ajax' => TRUE,
  );
  $output = ctools_modal_form_wrapper('filedepot_newfolder_form', $form_state);

  if ($form_state['executed'] && ($js)) {
    $cid = intval($form_state['values']['filedepot_parentfolder']);
    $commands = array();
    $commands[] = ctools_ajax_command_redirect("filedepot/folder/$cid");
    $commands[] = ctools_modal_command_dismiss(t('New folder success'));
    // In typical usage you will do something else here, such as update a
    // div with HTML or redirect the page based upon the results of the modal
    // form.
    print ajax_render($commands);
    exit;
  }

  print ajax_render($output);
  exit;

}

function filedepot_newfolder_form($form, &$form_state) {
  global $user;

  $filedepot = filedepot_filedepot();

  // Using the ctools cache functionality to save which folder the user has selected
  ctools_include('object-cache');
  $cid = ctools_object_cache_get('filedepot', 'folder');

  module_load_include('php', 'filedepot', 'lib-common');

  $form['filedepot_foldername'] = array(
    '#type' => 'textfield',
    '#title' => t('Folder Name'),
    '#size' => 34,
  );

  if ($filedepot->ogmode_enabled AND $filedepot->checkPermission($filedepot->ogrootfolder, 'admin')) {
    $parentFolders = array($filedepot->ogrootfolder => 'Top Level Folder');
  } elseif (user_access('administer filedepot', $user)) {
    $parentFolders = array(0 => 'Top Level Folder');
  }
  else {
    $parentFolders = array();
  }
  $parentFolders += filedepot_recursiveAccessArray(array('admin'));

  $form['filedepot_parentfolder'] = array(
    '#type' => 'select',
    '#title' => t('Parent Folder'),
    '#required' => FALSE,
    '#options' => $parentFolders,
    '#default_value' => $cid,
  );

  $form['filedepot_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#rows' => 2,
  );

  $form['filedepot_inherit_permissions'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Inherit Parent Permission'),
    '#options' => array('yes' => t('Yes')),
  );

  $form['buttons'] = array(
    '#prefix' => '<div style="text-align:center;">',
    '#suffix' => '</div>',
  );

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['buttons']['cancel'] = array(
    '#type' => 'submit',
    '#access' => TRUE,
    '#value' => t('Cancel'),
    '#weight' => 60,
    '#submit' => array('filedepot_ctools_form_cancel'), //This is the name of a function reproduced below
  );

  $form['buttons']['submit']['#validate'][] = 'filedepot_newfolder_validate';
  $form['buttons']['submit']['#submit'][] = 'filedepot_newfolder_submit';

  return $form;

}

function filedepot_newfolder_validate($form, &$form_state) {
  if (empty($form_state['values']['filedepot_foldername'])) {
    form_set_error('filedepot_foldername', t('Folder must have a valid name'));
  }
  if ($node->parentfolder == 0 AND !user_access('administer filedepot')) {
    form_set_error('filedepot_foldername', t('Invalid parent folder'));
  }
}


/* Submit handler for the filedepot module new folder form
 */
function filedepot_newfolder_submit($form, &$form_state) {
  global $user;

  $node = new stdClass();
  $node->type = 'filedepot_folder';
  node_object_prepare($node);
  $node->language = LANGUAGE_NONE;
  $node->uid = $user->uid;
  $node->name = $user->name;
  $node->title = check_plain($form_state['values']['filedepot_foldername']);
  $node->description = check_plain($form_state['values']['filedepot_foldername']);
  $node->filedepot_folder_desc[LANGUAGE_NONE][0]['value'] = $form_state['values']['filedepot_description'];
  $node->parentfolder = $form_state['values']['filedepot_parentfolder'];
  if ($form_state['values']['filedepot_inherit_permissions']['yes'] == 'yes') {
    $node->inherit = 1;
  }
  else {
    $node->inherit = 0;
  }
  node_save($node);
  if (!$node) {
    drupal_set_message(t('Error creating Folder'), 'error');
  }

}


/* Function called by Cancel buttons to close the ctools modal dialog */
function filedepot_ctools_form_cancel() {
  $commands = array();
  $commands[] = ctools_modal_command_dismiss();
  print ajax_render($commands);
  exit;
}


function filedepot_newversion_form($form, &$form_state) {
  global $user;

  $filedepot = filedepot_filedepot();

  // Using the ctools cache functionality to save which folder the user has selected
  ctools_include('object-cache');
  $cid = ctools_object_cache_get('filedepot', 'folder');

  module_load_include('php', 'filedepot', 'lib-common');

  $form['filedepot_fid'] = array(
    '#type' => 'hidden',
  );

  $form['filedepot_file'] = array(
    '#type' => 'managed_file',
    '#title' => t('Choose a file'),
    '#size' => 22,
  );

  $form['filedepot_filetags'] = array(
    '#type' => 'textfield',
    '#title' => t('Tags'),
    '#size' => 34,
  );

  $form['filedepot_version_note'] = array(
    '#type' => 'textarea',
    '#title' => t('Version Notes'),
    '#rows' => 2,
  );

  $form['filedepot_email_notification'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Email Notification'),
    '#options' => array('yes' => t('Yes')),
    '#default_value' => array('yes' => 'yes'),
  );

  $form['buttons'] = array(
    '#prefix' => '<div style="text-align:center;">',
    '#suffix' => '</div>',
  );

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload File'),
  );

  $form['buttons']['cancel'] = array(
    '#type' => 'button',
    '#access' => TRUE,
    '#value' => t('Cancel'),
    '#weight' => 60,
    '#attributes' => array('onclick' => 'YAHOO.container.newfiledialog.hide(); return false;'),
  );

  $form['buttons']['submit']['#submit'][] = 'filedepot_newversion_submit';

  return $form;

}


/* Submit handler for the filedepot module new file version form
 */
function filedepot_newversion_submit($form, &$form_state) {
  global $user;

  module_load_include('php', 'filedepot', 'lib-common');


  if ($form_state['values']['filedepot_fid'] > 0) {
    $fid = $form_state['values']['filedepot_fid'];
    $filetags = $form_state['values']['filedepot_filetags'];

    // Retrieve the current file and folder details
    $query = db_select('filedepot_files', 'a');
    $query->join('filedepot_categories', 'b', 'b.cid = a.cid');
    $query->fields('a', array('cid', 'drupal_fid', 'version', 'fname'));
    $query->fields('b', array('nid'));
    $query->condition('a.fid', $fid, '=');
    list($cid, $dfid, $current_version, $fname, $folder_nid) = array_values($query->execute()->fetchAssoc());

    $foldernode = node_load($folder_nid);

    $filedepot = filedepot_filedepot();
    $private_destination = 'private://filedepot/' . $foldernode->folder . '/';

    // Best to call file_prepare_directory() - even if you believe directory exists
    file_prepare_directory($private_destination, FILE_CREATE_DIRECTORY);

    if (isset($form_state['values']['filedepot_file']) AND $form_state['values']['filedepot_file'] > 0) {

      $file = file_load($form_state['values']['filedepot_file']);
      list($scheme, $target) = explode('://', $file->uri, 2);
      // The new file should still be in the temporary location so we need to move it
      if ($scheme == 'temporary') {
        // Remove erroneous leading or trailing, forward-slashes and backslashes.
        $target = trim($target, '\/');
        $private_uri = $private_destination . $file->filename;
        file_prepare_directory($private_destination, FILE_CREATE_DIRECTORY);
        $file = file_move($file, $private_uri, FILE_EXISTS_RENAME);
        //Set the status of the uploaded file.
        $file->status = FILE_STATUS_PERMANENT;
        file_save($file);

        // Get name of new file in case it was renamed
        list($scheme, $target) = explode('://', $file->uri, 2);
        $filename = str_replace("filedepot/{$foldernode->folder}/", '', $target);

        // Update the Drupal managed files table to point to the new version of this file
        // Need to cycle thru the attachments to get the right one
        foreach ($foldernode->filedepot_folder_file[LANGUAGE_NONE] as $delta => $original_file) {
          if ($original_file['fid'] == $dfid) {
            $foldernode->filedepot_folder_file[LANGUAGE_NONE][$delta]['fid'] = $file->fid;
            $foldernode->filedepot_folder_file[LANGUAGE_NONE][$delta]['uri'] = $file->uri;
            $foldernode->filedepot_folder_file[LANGUAGE_NONE][$delta]['filename'] = $file->filename;
            $foldernode->filedepot_folder_file[LANGUAGE_NONE][$delta]['filemime'] = $file->filemime;
            $foldernode->filedepot_folder_file[LANGUAGE_NONE][$delta]['filesize'] = $file->filesize;
            node_save($foldernode);
            break;
          }
        }

        // Update the file usage table
        file_usage_add($file, 'filedepot', 'node', $foldernode->nid);
        file_usage_delete($file, 'file');

        // Need to clear the cache as the node will still have the original file name
        field_cache_clear();

        if ($current_version < 1) {
          $current_version = 1;
        }
        $new_version = $current_version + 1;

        $sql = "INSERT INTO {filedepot_fileversions} (fid, drupal_fid, fname, version, notes, size, date, uid, status) "
        . "VALUES (:fid,:dfid,:fname,:version,:note,:size,:time,:uid,1)";
        db_query($sql, array(
          'fid' => $fid,
          'dfid' => $file->fid,
          'fname' => $filename,
          'version' => $new_version,
          'note' => check_plain($form_state['values']['filedepot_version_note']),
          'size' => $file->filesize,
          'time' => time(),
          'uid' => $user->uid,
        ));

        $sql  = "UPDATE {filedepot_files} SET fname=:fname,version=:version,size=:size,date=:date,drupal_fid=:dfid WHERE fid=:fid";
        db_query($sql, array(
          'fname' => $filename,
          'version' => $new_version,
          'size' => $file->filesize,
          'date' => time(),
          'dfid' => $file->fid,
          'fid' => $fid,
        ));

        // Update tags for this file
        if (!empty($filetags) AND $this->checkPermission($cid, 'view', 0, FALSE)) {
          $nexcloud->update_tags($fid, $filetags);
        }

        // Send out email notifications of new file added to all users subscribed
        if ($form_state['values']['filedepot_email_notification']['yes'] === 'yes') {
          filedepot_sendNotification($fid);
        }

      }

      $form_state['redirect'] = array("filedepot/folder/$cid");

    }
  }
  else {
    drupal_set_message(t('Invalid upload folder selected'), 'error');
  }

}
